"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.identifierToHover = void 0;
const vscode_1 = require("vscode");
const tokenNameHoverInformationMappingg = {
    ASSERT_WORKTOP_CONTAINS: '`ASSERT_WORKTOP_CONTAINS` is a transaction manifest instruction that asserts that the transaction worktop contains any of\na specific resource address. If none of that resource is present in the transaction worktop, then the transaction fails \natomically.\n\n# Arguments\n\n1. `ResourceAddress`: The resource address to assert that they exist on the transaction worktop.\n\n# Example\n\n```rtm\nASSERT_WORKTOP_CONTAINS\n    ResourceAddress("resource_sim1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqu57yag");\n```',
    ASSERT_WORKTOP_CONTAINS_BY_AMOUNT: '`ASSERT_WORKTOP_CONTAINS_BY_AMOUNT` is a transaction manifest instruction that asserts that the transaction worktop \ncontains a specific amount a specific resource address. If the specified amount is not present in the transaction \nworktop, then the transaction fails atomically.\n\n# Arguments\n\n1. `Decimal`: The amount of the resource to assert that it exist in the transaction worktop. \n2. `ResourceAddress`: The resource address to assert that they exist on the transaction worktop.\n\n# Example\n\n```rtm\nASSERT_WORKTOP_CONTAINS_BY_AMOUNT\n    Decimal("12")\n    ResourceAddress("resource_sim1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqu57yag");\n```',
    ASSERT_WORKTOP_CONTAINS_BY_IDS: '`ASSERT_WORKTOP_CONTAINS_BY_IDS` is a transaction manifest instruction that asserts that the transaction worktop \ncontains a specific `NonFungibleIds` of a specific resource address. If the specified amount is not present in the \ntransaction worktop, then the transaction fails atomically.\n\n# Arguments\n\n1. `Set<NonFungibleIds>`: A set of `NonFungibleId`s to take from the transaction worktop.\n2. `ResourceAddress`: The resource address to take from the worktop and into a bucket.\n3. `Bucket`: A named bucket that the resources will be put in.\n\n# Example\n\n```rtm\nASSERT_WORKTOP_CONTAINS_BY_IDS\n    Set<NonFungibleId>(NonFungibleId("0905000000"), NonFungibleId("0907000000"))\n    ResourceAddress("resource_sim1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqu57yag");\n```',
    CALL_FUNCTION: '`CALL_FUNCTION` is a transaction manifest instruction that allows you to call a specific function on a specific blueprint\nin a specific package. The package is selected through a `PackageAddress` while the blueprint and method are specified \nthrough a string of their respective names.\n\n# Arguments\n\n1. `PackageAddress`: This argument specifies the address of the package where the blueprint lives.\n2. `String`: A string of the blueprint name\n3. `String`: A string of the function name\n4. Arguments: The last argument(s) is any variable number of arguments.\n\n# Returns\n\n1. `Bucket`s: An optional return for functions that return a bucket when called. When a bucket is returned, it goes to \nthe transaction worktop. \n2. `Proof`s: An optional return for functions that return a proof when called. When a proof is returned, it goes to the\ntransaction worktop. \n\n# Example\n\n```rtm\nCALL_FUNCTION\n    PackageAddress("package_sim1qyqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqsnznk7n")\n    "Radiswap"\n    "instantiate_liquidity_pool"\n    Bucket("xrd_bucket")\n    Bucket("usd_bucket");\n```',
    CALL_METHOD: '`CALL_METHOD` is a transaction manifest instruction that allows you to call a specific method on a specific component. \n\n# Arguments\n\n1. `ComponentAddress`: The first argument to this instruction is the address of the component where the method lives.\n2. `String`: A string of the name of the method to call\n3. Arguments: The last argument(s) is any variable number of arguments.\n\n# Returns\n\n1. `Bucket`s: An optional return for methods that return a bucket when called. When a bucket is returned, it goes to the\ntransaction worktop. \n2. `Proof`s: An optional return for methods that return a proof when called. When a proof is returned, it goes to the\ntransaction worktop. \n\n# Example\n\n```rtm\nCALL_METHOD\n    ComponentAddress("component_sim1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqgyhcl2")\n    "withdraw"\n    Decimal("100")\n    ResourceAddress("resource_sim1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqu57yag");\n```',
    CALL_METHOD_WITH_ALL_RESOURCES: '`CALL_METHOD_WITH_ALL_RESOURCES` is an instruction that calls a method with all of the resources that are currently in \nthe transaction worktop leaving no resources or buckets behind in the transaction worktop.\n\n# Arguments\n\n1. `ComponentAddress`: The first argument to this instruction is the address of the component where the method lives.\n2. `String`: A string of the name of the method to call\n\n# Returns\n\n1. `Bucket`s: An optional return for methods that return a bucket when called. When a bucket is returned, it goes to the\ntransaction worktop. \n2. `Proof`s: An optional return for methods that return a proof when called. When a proof is returned, it goes to the\ntransaction worktop. \n\n# Example\n\n```rtm\nCALL_METHOD_WITH_ALL_RESOURCES\n    ComponentAddress("component_sim1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqgyhcl2")\n    "deposit_batch";\n```\n\n# Note\n\nIn previous version of Scrypto (0.1 - 0.4) this instruction dropped all proofs when called, this is no longer the case\nas of 0.5.0 where this has been split into two instructions:\n\n1. `DROP_ALL_PROOFS`: Drops all of the proofs in the auth zone and the transaction worktop.\n2. `CALL_METHOD_WITH_ALL_RESOURCES`: Calls a method with all of the resources in the transaction worktop.\n\nInternally, the instruction constructs a `Vec<Bucket>`, so, any method that takes a `Vec<Bucket>` can be called with\nthis instruction.',
    CLEAR_AUTH_ZONE: "`CLEAR_AUTH_ZONE` is a transaction manifest instruction that clears the auth zone off any proofs that are currently \nthere.\n\n# Example\n\n```rtm\nCLEAR_AUTH_ZONE;\n```",
    CLONE_PROOF: '`CLONE_PROOF` is a transaction manifest instruction that allows you to create a copy of a proof that you already have. \n\n# Arguments\n\n1. `Proof`: The proof to clone.\n2. `Proof`: The cloned proof.\n\n# Example\n\n```rtm\nCLONE_PROOF\n    Proof("original_proof");\n    Proof("cloned_proof");\n```',
    CREATE_PROOF_FROM_AUTH_ZONE: '`CREATE_PROOF_FROM_AUTH_ZONE` is a transaction manifest instruction that allows you to create a proof from the auth zone\nof all resources with a specified resource address.\n\n# Arguments\n\n1. `ResourceAddress`: The resource address to create a proof from. \n2. `Proof`: A named proof that the created proof will be called.\n\n# Example\n\n```rtm\nCREATE_PROOF_FROM_AUTH_ZONE\n    ResourceAddress("resource_sim1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqu57yag")\n    Proof("my_proof");\n```',
    CREATE_PROOF_FROM_AUTH_ZONE_BY_AMOUNT: '`CREATE_PROOF_FROM_AUTH_ZONE_BY_AMOUNT` is a transaction manifest instruction that allows you to create a proof from the \nauth zone of a specific amount of a specific resource address.\n\n# Arguments\n\n1. `Decimal`: A decimal of the amount of resources to create a proof from.\n1. `ResourceAddress`: The resource address to create a proof from. \n2. `Proof`: A named proof that the created proof will be called.\n\n# Example\n\n```rtm\nCREATE_PROOF_FROM_AUTH_ZONE_BY_AMOUNT\n    Decimal("10")\n    ResourceAddress("resource_sim1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqu57yag")\n    Proof("my_proof");\n```',
    CREATE_PROOF_FROM_AUTH_ZONE_BY_IDS: '`CREATE_PROOF_FROM_AUTH_ZONE_BY_IDS` is a transaction manifest instruction that allows you to create a proof from the \nauth zone of a specific `NonFungibleId`s of a specific resource address.\n\n# Arguments\n\n1. `Set<NonFungibleIds>`: A set of `NonFungibleId`s to take from the transaction worktop.\n1. `ResourceAddress`: The resource address to create a proof from. \n2. `Proof`: A named proof that the created proof will be called.\n\n# Example\n\n```rtm\nCREATE_PROOF_FROM_AUTH_ZONE_BY_IDS\n    Set<NonFungibleId>(NonFungibleId("0905000000"), NonFungibleId("0907000000"))\n    ResourceAddress("resource_sim1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqu57yag")\n    Proof("my_proof");\n```',
    DROP_ALL_PROOFS: "`DROP_ALL_PROOFS` is a transaction manifest instruction that allows you to drop all of the proofs in the transaction \nworktop and the auth zone. This instruction is useful to call before performing a `CALL_METHOD_WITH_ALL_RESOURCES` \nas it ensures that there are buckets with locked illiquid amounts.\n\n# Example\n\n```rtm\nDROP_ALL_PROOFS;\n```",
    DROP_PROOF: '`DROP_PROOF` is a transaction manifest instruction that allows you to drop a specific proof.\n\n# Arguments\n\n1. `Proof`: The proof to drop.\n\n# Example\n\n```rtm\nDROP_PROOF\n    Proof("proof_to_drop");\n```',
    POP_FROM_AUTH_ZONE: '`POP_FROM_AUTH_ZONE` is a transaction manifest instruction that allows you to pop a proof from the auth zone and into a \nnamed proof. If there are proofs in the auth zone, then this instruction fails.\n\n# Arguments\n\n1. `Proof`: A named proof which the will be the name of the proof once its popped from the auth zone stack.\n\n# Example\n\n```rtm\nPOP_FROM_AUTH_ZONE\n    Proof("my_proof");\n```',
    PUBLISH_PACKAGE: '`PUBLISH_PACKAGE` is a transaction manifest instruction that allows you to publish a package given the WASM binary of \nthe package.\n\n# Arguments\n\n1. `Bytes`: A bytes object of the package WASM binary.\n\n# Example\n\n```rtm\nPUBLISH_PACKAGE\n    Bytes("10020000003007c00000000061736d010000000405017001010105030100100619037f01418080c0000b7f00418080c0000b7f00418080c0000b072503066d656d6f727902000a5f5f646174615f656e6403010b5f5f686561705f6261736503020019046e616d65071201000f5f5f737461636b5f706f696e746572004d0970726f64756365727302086c616e6775616765010452757374000c70726f6365737365642d6279010572757374631d312e35392e30202839643162323130366520323032322d30322d323329320c1000000000");\n```',
    PUSH_TO_AUTH_ZONE: '`PUSH_TO_AUTH_ZONE` is a transaction manifest instruction that allows you to push a proof from a named proof and into \nthe auth zone. \n\n# Arguments\n\n1. `Proof`: A proof to push onto the auth zone.\n\n# Example\n\n```rtm\nPUSH_TO_AUTH_ZONE\n    Proof("my_proof");\n```',
    RETURN_TO_WORKTOP: '`RETURN_TO_WORKTOP` is a transaction manifest instruction that allows you to return a bucket to the transaction worktop.\n\n# Arguments\n\n1. `Bucket`: A named bucket to put back into the transaction worktop.\n\n# Example\n\n```rtm\nRETURN_TO_WORKTOP\n    Bucket("my_bucket");\n```',
    TAKE_FROM_WORKTOP: '`TAKE_FROM_WORKTOP` is a transaction manifest instruction that allows you to take all of a specific resource address \nfrom the transaction worktop and into a bucket.\n\n# Arguments\n\n1. `ResourceAddress`: The resource address to take from the worktop and into a bucket.\n2. `Bucket`: A named bucket that the resources will be put in.\n\n# Example\n\n```rtm\nTAKE_FROM_WORKTOP\n    ResourceAddress("resource_sim1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqu57yag")\n    Bucket("my_bucket");\n```',
    TAKE_FROM_WORKTOP_BY_AMOUNT: '`TAKE_FROM_WORKTOP_BY_AMOUNT` is a transaction manifest instruction that allows you to take a specific amount of \nspecific resource address from the transaction worktop and into a bucket.\n\n# Arguments\n\n1. `Decimal`: A decimal representing the amount of the resource to take from the worktop.\n2. `ResourceAddress`: The resource address to take from the worktop and into a bucket.\n3. `Bucket`: A named bucket that the resources will be put in.\n\n# Example\n\n```rtm\nTAKE_FROM_WORKTOP\n    Decimal("12")\n    ResourceAddress("resource_sim1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqu57yag")\n    Bucket("my_bucket");\n```',
    TAKE_FROM_WORKTOP_BY_IDS: '`TAKE_FROM_WORKTOP_BY_IDS` is a transaction manifest instruction that allows you to take specific resources with specific\n`NonFungibleId`s from the transaction worktop and into a bucket.\n\n# Arguments\n\n1. `Set<NonFungibleIds>`: A set of `NonFungibleId`s to take from the transaction worktop.\n2. `ResourceAddress`: The resource address to take from the worktop and into a bucket.\n3. `Bucket`: A named bucket that the resources will be put in.\n\n# Example\n\n```rtm\nTAKE_FROM_WORKTOP_BY_IDS\n    Set<NonFungibleId>(NonFungibleId("0905000000"), NonFungibleId("0907000000"))\n    ResourceAddress("resource_sim1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqu57yag")\n    Bucket("my_bucket");\n```',
};
function identifierToHover(identifier) {
    // @ts-ignore
    // prettier-ignore
    let hoverInformation = tokenNameHoverInformationMappingg[identifier];
    return hoverInformation ? new vscode_1.Hover(hoverInformation) : undefined;
}
exports.identifierToHover = identifierToHover;
//# sourceMappingURL=hover_strings.js.map